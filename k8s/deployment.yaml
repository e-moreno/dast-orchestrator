apiVersion: apps/v1
kind: Deployment
metadata:
  name: dast-orchestrator
  namespace: dast-orchestrator
  labels:
    app: dast-orchestrator
spec:
  replicas: 1  # Start with single replica for cost optimization
  selector:
    matchLabels:
      app: dast-orchestrator
  template:
    metadata:
      labels:
        app: dast-orchestrator
    spec:
      containers:
      # ZAP Scanner Container
      - name: zap-scanner
        image: zaproxy/zap-stable:latest  # Official ZAP image
        command: ["/zap/zap.sh"]
        args: 
        - "-daemon"
        - "-port"
        - "8090"
        - "-host"
        - "0.0.0.0"
        - "-config"
        - "api.disablekey=true"
        - "-config"
        - "api.addrs.addr.name=.*"
        - "-config"
        - "api.addrs.addr.regex=true"
        - "-config"
        - "api.addrs.addr.enabled=true"
        ports:
        - containerPort: 8090
          name: zap-port
        env:
        - name: ZAP_KEY
          valueFrom:
            secretKeyRef:
              name: dast-secrets
              key: ZAP_KEY
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - 'curl -s http://localhost:8090/JSON/core/view/version/ > /dev/null'
          initialDelaySeconds: 15
          periodSeconds: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - 'curl -s http://localhost:8090/JSON/core/view/version/ > /dev/null'
          initialDelaySeconds: 15
          periodSeconds: 3
        resources:
          requests:
            memory: "256Mi"      # Reduced for cost optimization
            cpu: "100m"          # Reduced for cost optimization
          limits:
            memory: "2Gi"
            cpu: "1000m"
            
      # DAST API Container  
      - name: dast-api
        image: tommoreno/dast-api:multiarch  # Multi-architecture image from GitHub Actions
        ports:
        - containerPort: 8080
          name: api-port
        env:
        # ZAP Configuration (from ConfigMap)
        - name: ZAP_HOST
          valueFrom:
            configMapKeyRef:
              name: dast-config
              key: ZAP_HOST
        - name: ZAP_PORT
          valueFrom:
            configMapKeyRef:
              name: dast-config
              key: ZAP_PORT
        - name: ZAP_PROTO
          valueFrom:
            configMapKeyRef:
              name: dast-config
              key: ZAP_PROTO
        - name: ZAP_KEY
          valueFrom:
            secretKeyRef:
              name: dast-secrets
              key: ZAP_KEY
        # Security
        - name: HMAC_SECRET
          valueFrom:
            secretKeyRef:
              name: dast-secrets
              key: HMAC_SECRET
        # Shared Database configuration (from ConfigMap)
        - name: DB_ENGINE
          valueFrom:
            configMapKeyRef:
              name: dast-config
              key: DB_ENGINE
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: dast-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: dast-config
              key: DB_PORT
        - name: DB_CLUSTER
          valueFrom:
            configMapKeyRef:
              name: dast-config
              key: DB_CLUSTER
        # Database RO configuration
        - name: DB_RO_USERNAME
          valueFrom:
            configMapKeyRef:
              name: dast-config
              key: DB_RO_USERNAME
        - name: DB_RO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dast-secrets
              key: DB_RO_PASSWORD
        # Database RW configuration
        - name: DB_RW_USERNAME
          valueFrom:
            configMapKeyRef:
              name: dast-config
              key: DB_RW_USERNAME
        - name: DB_RW_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dast-secrets
              key: DB_RW_PASSWORD
        livenessProbe:
          httpGet:
            path: /ping
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ping
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"      # Reduced for cost optimization
            cpu: "50m"           # Reduced for cost optimization  
          limits:
            memory: "256Mi"      # Reduced from 512Mi to control costs
            cpu: "100m"          # Reduced from 250m to control costs
      
      # Shared volume for temporary files if needed
      volumes:
      - name: temp-storage
        emptyDir: {}
        
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
